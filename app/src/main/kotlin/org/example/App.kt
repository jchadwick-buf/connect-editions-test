/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example

import com.connectrpc.ProtocolClientConfig
import com.connectrpc.extensions.GoogleJavaProtobufStrategy
import com.connectrpc.impl.ProtocolClient
import com.connectrpc.okhttp.ConnectOkHttpClient
import com.connectrpc.protocols.NetworkProtocol
import com.google.protobuf.TextFormat
import okhttp3.OkHttpClient
import test.ExampleServiceClient
import test.Test
import test.Test.ExampleMessage
import kotlin.system.exitProcess

suspend fun main() {
    val expectedNotUtf8 = "te\u0000st1"
    val returnedNotUtf8 = "te\u0000st2"
    val expectedEnum  = Test.ExampleEnum.VALUE_IN
    val returnedEnum  = Test.ExampleEnum.VALUE_OUT
    val expectedFlags =  listOf(false, true)
    val returnedFlags = listOf(true, false)

    val client = ProtocolClient(
        httpClient = ConnectOkHttpClient(OkHttpClient()),
        ProtocolClientConfig(
            host = "http://127.0.0.1:8080",
            serializationStrategy = GoogleJavaProtobufStrategy(),
            networkProtocol = NetworkProtocol.CONNECT, // Protocol.GRPC or Protocol.GRPC_WEB.
        ),
    )
    val exampleClient = ExampleServiceClient(client);
    val response = exampleClient.exampleCall(ExampleMessage.newBuilder()
        .setNotUtf8(expectedNotUtf8)
        .addFlags(expectedFlags[0])
        .addFlags(expectedFlags[1])
        .setChild(ExampleMessage.newBuilder()
            .setNotUtf8(expectedNotUtf8)
            .setEnum(expectedEnum))
        .setEnum(expectedEnum).build())
    response.success { success ->
        println("Response: ${TextFormat.printer().printToString(success.message)}")
        if (!success.message.notUtf8.equals(returnedNotUtf8)) {
            println("Client: notUtf8 expected $returnedNotUtf8 got ${success.message.notUtf8}")
            exitProcess(1)
        }
        if (!success.message.flagsList.equals(returnedFlags)) {
            println("Client: flagsList expected $returnedFlags got ${success.message.flagsList}")
            exitProcess(1)
        }
        if (!success.message.child.notUtf8.equals(returnedNotUtf8)) {
            println("Client: child.notUtf8 expected $returnedFlags got ${success.message.child.notUtf8}")
            exitProcess(1)
        }
        if (!success.message.child.enum.equals(returnedEnum)) {
            println("Client: child.enum expected $returnedEnum got ${success.message.child.enum}")
            exitProcess(1)
        }
        if (!success.message.enum.equals(returnedEnum)) {
            println("Client: enum expected $returnedEnum got ${success.message.enum}")
            exitProcess(1)
        }
        println("Success")
        exitProcess(0)
    }
    response.failure { error ->
        println("Server: $error")
        exitProcess(1)
    }
}
